#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

###### Compiling #######

:fi # lesystem_i18n.layout

compile '/stylesheets/*' do
  filter :less
end

preprocess do
  carousels = @items.select{ |i| i.identifier =~ %r{^.+/pages/(users)/$} }
  carousels.each do |page|
    sections = get_sections(page)
    section_slugs = page[:sections]
    sections.each_with_index do |section, ind|
      attribs = page.attributes.clone
      attribs[:carousel_start] = ind+1
      attribs[:sub_slug] = section[:slug]
      sub_page = Item.new(page.raw_content, attribs, section.identifier.sub('sections', 'subpage'))
      @items.push(sub_page)
    end
  end
end

compile '/*/pages/users/subpage/*' do
  filter :kramdown
end

compile '/*/pages/*/sections/*' do
  filter :kramdown
end

# Keeping this around if the users page expands...
# compile '/pages/users/*' do
#   filter :kramdown
#   filter :erb
#   layout 'carousel'
#   layout 'base'
# end

compile '/*/pages/special/*/*' do
  filter :kramdown
  filter :erb
  layout 'special'
  layout 'base'
end

compile '/*/pages/special/*' do
  filter :kramdown
  filter :erb
end

compile '/*/pages/forms/*/*' do
  filter :kramdown
  filter :erb
  layout 'forms'
  layout 'base'
end

compile '/*/pages/forms/*' do
  filter :kramdown
  filter :erb
end

compile '/*/pages/(home|plans|services|features|users)/*' do
  filter :kramdown
  filter :erb
  layout item.identifier.split('/')[-1]
  layout 'base'
end

compile '/*/pages/*' do
  filter :kramdown
  filter :erb
  layout 'generic'
  layout 'base'
end

compile '*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    layouts 'base'
  end
end

##### Routing #######

route '/static/*' do
  item.identifier[7..-2]
end

route '/robots' do
  item.identifier.chop + '.txt'
end

route '/stylesheets/*' do
  item.identifier.sub(%r{^/stylesheets}, "/#{@config[:static_loc]}/style").chop + '.css'
end

route '/scripts/*' do
  item.identifier.sub(%r{^/scripts}, "/#{@config[:static_loc]}/js").chop + '.js'
end

route '/*/pages/*/sections/*' do
    # nothing
end

route '/*/pages/(special|forms)/*/*' do
  get_page_url(@item) + "index.html"
end

route '/*/pages/(special|forms)/*' do
  # nothing
end

route '/*/pages/*' do
   get_page_url(@item) + "index.html"
end


route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :erb
